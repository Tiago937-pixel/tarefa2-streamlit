# <<< IN√çCIO DO C√ìDIGO PARA COLAR EM UM ARQUIVO CHAMADO app.py >>>
import streamlit as st
import pandas as pd
import numpy as np
import scipy.stats as stats
import statsmodels.api as sm
from statsmodels.formula.api import ols
from statsmodels.stats.multicomp import pairwise_tukeyhsd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# --- Configura√ß√£o da P√°gina e Carregamento dos Dados ---
st.set_page_config(layout="wide", page_title="An√°lise de Pre√ßos Imobili√°rios (Ames Housing)")

@st.cache_data # Cache para n√£o recarregar os dados a cada intera√ß√£o
def load_data():
    # URL para o dataset Ames Housing (Tab-separated)
    data_url = "https://raw.githubusercontent.com/jgamora/datasets/main/AmesHousing.txt"
    try:
        df = pd.read_csv(data_url, sep='\t')
        st.success("Dataset Ames Housing carregado com sucesso!")
    except Exception as e:
        st.error(f"Erro ao carregar os dados: {e}")
        st.info("Verifique a URL do dataset ou sua conex√£o com a internet.")
        return pd.DataFrame() # Retorna DataFrame vazio em caso de erro

    # Renomear colunas para remover espa√ßos e facilitar o uso (exemplo)
    # √â importante que os nomes das colunas no c√≥digo correspondam aos do arquivo!
    # Vamos listar algumas colunas importantes e garantir que seus nomes sejam consistentes.
    # Se houver erros de 'KeyError', verifique os nomes das colunas no dataset original.
    # Exemplo de renomea√ß√£o (ajuste conforme necess√°rio ap√≥s inspecionar o df.columns):
    df.rename(columns={
        'Overall Qual': 'OverallQual',
        'Gr Liv Area': 'GrLivArea',
        'Total Bsmt SF': 'TotalBsmtSF',
        '1st Flr SF': 'FirstFlrSF', # Corrigido para uso mais comum
        'Bsmt Qual': 'BsmtQual',
        'Kitchen Qual': 'KitchenQual',
        'Fireplace Qu': 'FireplaceQu',
        'Garage Type': 'GarageType',
        'Garage Cars': 'GarageCars',
        'Garage Area': 'GarageArea',
        'Central Air': 'CentralAir',
        'MS Zoning': 'MSZoning',
        'House Style': 'HouseStyle'
        # Adicione outros mapeamentos de renomea√ß√£o se necess√°rio
    }, inplace=True, errors='ignore') # errors='ignore' para n√£o falhar se a coluna n√£o existir


    # Tratamento b√°sico de valores ausentes (simplificado)
    # Preencher num√©ricos com mediana
    for col in df.select_dtypes(include=np.number).columns:
        if df[col].isnull().any():
            df[col].fillna(df[col].median(), inplace=True)
            
    # Preencher categ√≥ricos com 'Missing' ou moda
    for col in df.select_dtypes(include='object').columns:
        if df[col].isnull().any():
            df[col].fillna('Missing', inplace=True)
            
    return df

df_ames = load_data()

# --- Barra Lateral para Entradas do Usu√°rio ---
st.sidebar.header("Op√ß√µes de An√°lise")

analysis_type = st.sidebar.selectbox(
    "Escolha o Tipo de An√°lise:",
    ["Vis√£o Geral dos Dados", "An√°lise ANOVA", "An√°lise de Regress√£o Linear"]
)

# --- √Årea Principal para Exibi√ß√£o ---
st.title("üè† Dashboard de An√°lise de Pre√ßos Imobili√°rios")
st.markdown("Dataset: Ames Housing")

if df_ames.empty:
    st.warning("Dataset n√£o p√¥de ser carregado. Funcionalidades limitadas.")
else:
    # --- Vis√£o Geral dos Dados ---
    if analysis_type == "Vis√£o Geral dos Dados":
        st.header("Vis√£o Geral dos Dados")
        st.markdown(f"O dataset possui {df_ames.shape[0]} observa√ß√µes e {df_ames.shape[1]} vari√°veis.")
        
        st.subheader("Primeiras Linhas do Dataset:")
        st.dataframe(df_ames.head())

        st.subheader("Estat√≠sticas Descritivas (Vari√°veis Num√©ricas):")
        st.dataframe(df_ames.describe(include=np.number))

        if 'SalePrice' in df_ames.columns:
            st.subheader("Distribui√ß√£o do Pre√ßo de Venda (SalePrice)")
            fig_price_hist = px.histogram(df_ames, x='SalePrice', nbins=70, title="Distribui√ß√£o do Pre√ßo de Venda")
            st.plotly_chart(fig_price_hist, use_container_width=True)
        else:
            st.warning("Coluna 'SalePrice' n√£o encontrada no dataset.")

        st.subheader("Heatmap de Correla√ß√£o (Vari√°veis Num√©ricas)")
        numeric_cols = df_ames.select_dtypes(include=np.number).columns
        if not df_ames[numeric_cols].empty:
            corr_matrix = df_ames[numeric_cols].corr()
            fig_corr = px.imshow(corr_matrix, title="Heatmap de Correla√ß√£o", text_auto=".2f", aspect="auto", color_continuous_scale="Viridis")
            st.plotly_chart(fig_corr, use_container_width=True)
        else:
            st.write("Nenhuma coluna num√©rica encontrada para calcular a correla√ß√£o.")

    # --- An√°lise ANOVA ---
    elif analysis_type == "An√°lise ANOVA":
        st.header("I. An√°lise Explorat√≥ria e Comparativa com ANOVA")
        st.markdown("""
        Aqui investigamos se existem diferen√ßas significativas no pre√ßo m√©dio de venda (`SalePrice`) 
        entre as categorias de vari√°veis selecionadas.
        """)

        if 'SalePrice' not in df_ames.columns:
            st.error("A coluna 'SalePrice' √© necess√°ria para a an√°lise ANOVA e n√£o foi encontrada.")
        else:
            # Sele√ß√£o de vari√°veis categ√≥ricas para ANOVA
            all_cat_vars = [col for col in df_ames.select_dtypes(include='object').columns if df_ames[col].nunique() < 30 and df_ames[col].nunique() > 1]
            
            default_anova_vars = []
            # Tentar encontrar vari√°veis comuns e adequadas para ANOVA
            common_vars_for_anova = ['OverallQual', 'Neighborhood', 'CentralAir', 'KitchenQual', 'MSZoning', 'HouseStyle', 'ExterQual', 'BsmtQual']
            # Adicionar OverallQual se for num√©rica mas tratada como categ√≥rica (com poucas classes)
            if 'OverallQual' in df_ames.columns and df_ames['OverallQual'].dtype != 'object' and df_ames['OverallQual'].nunique() < 15:
                 if 'OverallQual' not in all_cat_vars: all_cat_vars.insert(0, 'OverallQual')


            for var_name in common_vars_for_anova:
                if var_name in all_cat_vars or (var_name == 'OverallQual' and var_name in df_ames.columns):
                    default_anova_vars.append(var_name)
                if len(default_anova_vars) >= 3:
                    break
            if not default_anova_vars and all_cat_vars: # Fallback
                 default_anova_vars = all_cat_vars[:min(3, len(all_cat_vars))]

            selected_cat_vars_anova = st.sidebar.multiselect(
                "Escolha 2-3 vari√°veis para ANOVA:",
                options=all_cat_vars,
                default=default_anova_vars
            )

            if not selected_cat_vars_anova:
                st.warning("Por favor, selecione pelo menos uma vari√°vel categ√≥rica para a an√°lise ANOVA.")
            else:
                for cat_var in selected_cat_vars_anova:
                    st.subheader(f"ANOVA para: {cat_var} vs. SalePrice")

                    anova_data = df_ames[['SalePrice', cat_var]].dropna()
                    
                    # Converter para string se for 'OverallQual' ou similar para garantir tratamento categ√≥rico
                    if anova_data[cat_var].dtype != 'object':
                        anova_data[cat_var] = anova_data[cat_var].astype(str)

                    fig_boxplot = px.box(anova_data, x=cat_var, y='SalePrice', title=f'Pre√ßo de Venda por {cat_var}', color=cat_var)
                    st.plotly_chart(fig_boxplot, use_container_width=True)

                    groups = [anova_data['SalePrice'][anova_data[cat_var] == val] for val in anova_data[cat_var].unique()]
                    groups_for_test = [g for g in groups if len(g) >= 2] # Grupos com pelo menos 2 observa√ß√µes

                    if len(groups_for_test) < 2:
                        st.warning(f"N√£o h√° grupos suficientes (m√≠nimo 2 com >=2 obs.) para ANOVA na vari√°vel '{cat_var}'. Pulando.")
                        continue

                    f_statistic, p_value_anova = stats.f_oneway(*groups_for_test)
                    st.write(f"**Resultado ANOVA:** F-Statistic = {f_statistic:.4f}, p-valor = {p_value_anova:.4g}")

                    alpha = 0.05
                    if p_value_anova < alpha:
                        st.success(f"O p-valor ({p_value_anova:.4g}) √© menor que {alpha}. "
                                   f"H√° uma diferen√ßa estatisticamente significativa no pre√ßo m√©dio de venda "
                                   f"entre as diferentes categorias de '{cat_var}'.")
                    else:
                        st.info(f"O p-valor ({p_value_anova:.4g}) √© maior ou igual a {alpha}. "
                                f"N√£o h√° evid√™ncia de uma diferen√ßa estatisticamente significativa no pre√ßo m√©dio de venda "
                                f"entre as diferentes categorias de '{cat_var}'.")

                    st.markdown("**Verifica√ß√£o das premissas da ANOVA:**")
                    model_ols = ols(f'SalePrice ~ C({cat_var})', data=anova_data).fit()
                    residuals = model_ols.resid
                    
                    # 1. Normalidade dos Res√≠duos (Shapiro-Wilk)
                    if len(residuals) >= 3 and len(residuals) <= 5000:
                        shapiro_stat, shapiro_p = stats.shapiro(residuals)
                        st.write(f"*Normalidade dos Res√≠duos (Shapiro-Wilk):* Estat√≠stica={shapiro_stat:.4f}, p-valor={shapiro_p:.4g}")
                        if shapiro_p > alpha: st.write("Res√≠duos parecem ser normalmente distribu√≠dos (p > 0.05).")
                        else: st.write("Res√≠duos N√ÉO parecem ser normalmente distribu√≠dos (p <= 0.05). Premissa violada.")
                    elif len(residuals) > 5000:
                        ks_stat, ks_p = stats.kstest(residuals, 'norm', args=(np.mean(residuals), np.std(residuals)))
                        st.write(f"*Normalidade dos Res√≠duos (Kolmogorov-Smirnov):* Estat√≠stica={ks_stat:.4f}, p-valor={ks_p:.4g}")
                        if ks_p > alpha: st.write("Res√≠duos parecem ser normalmente distribu√≠dos (p > 0.05).")
                        else: st.write("Res√≠duos N√ÉO parecem ser normalmente distribu√≠dos (p <= 0.05). Premissa violada.")
                    else:
                        st.write("*Normalidade dos Res√≠duos:* Dados insuficientes para o teste.")

                    # Visualiza√ß√£o da Normalidade (Q-Q Plot)
                    fig_qq, ax_qq = plt.subplots(figsize=(6,4))
                    sm.qqplot(residuals, line='s', ax=ax_qq, fit=True)
                    ax_qq.set_title(f'Q-Q Plot dos Res√≠duos para {cat_var}')
                    st.pyplot(fig_qq)
                    plt.close(fig_qq)

                    # 2. Homocedasticidade (Levene Test)
                    levene_stat, levene_p = stats.levene(*groups_for_test)
                    st.write(f"*Homocedasticidade das Vari√¢ncias (Levene Test):* Estat√≠stica={levene_stat:.4f}, p-valor={levene_p:.4g}")
                    if levene_p > alpha: st.write("Vari√¢ncias parecem ser homog√™neas (p > 0.05).")
                    else: st.write("Vari√¢ncias N√ÉO parecem ser homog√™neas (p <= 0.05). Premissa violada (heterocedasticidade).")

                    # d) Alternativa Robusta (Kruskal-Wallis) se premissas violadas
                    prem_normalidade_ok = (len(residuals) >=3 and shapiro_p > alpha) if len(residuals) >=3 and len(residuals) <=5000 else (len(residuals) > 5000 and ks_p > alpha if len(residuals) > 5000 else True)
                    prem_homocedasticidade_ok = levene_p > alpha

                    if not prem_normalidade_ok or not prem_homocedasticidade_ok:
                        st.markdown("**Alternativa Robusta (Kruskal-Wallis Test):** Como as premissas da ANOVA podem ter sido violadas.")
                        kruskal_stat, kruskal_p = stats.kruskal(*groups_for_test)
                        st.write(f"*Kruskal-Wallis Test:* H-Statistic={kruskal_stat:.4f}, p-valor={kruskal_p:.4g}")
                        if kruskal_p < alpha:
                            st.success(f"Kruskal-Wallis indica uma diferen√ßa significativa (p < {alpha}) "
                                       f"na mediana do pre√ßo de venda entre os grupos de '{cat_var}'.")
                        else:
                            st.info(f"Kruskal-Wallis N√ÉO indica uma diferen√ßa significativa (p >= {alpha}) "
                                      f"na mediana do pre√ßo de venda entre os grupos de '{cat_var}'.")
                    
                    # e) Post-hoc (Tukey HSD) se ANOVA significativa e premissas OK
                    if p_value_anova < alpha and prem_normalidade_ok and prem_homocedasticidade_ok:
                        st.markdown("**Teste Post-hoc (Tukey HSD):**")
                        tukey_results = pairwise_tukeyhsd(anova_data['SalePrice'], anova_data[cat_var], alpha=alpha)
                        st.text(str(tukey_results))
                        st.caption(f"""
                        Interpreta√ß√£o do Tukey HSD para '{cat_var}':
                        A tabela acima mostra compara√ß√µes par a par. 'reject = True' indica uma diferen√ßa significativa 
                        no pre√ßo m√©dio de venda entre os dois grupos comparados.
                        """)
                    st.markdown("---") # Separador

    # --- An√°lise de Regress√£o Linear ---
    elif analysis_type == "An√°lise de Regress√£o Linear":
        st.header("II. An√°lise de Regress√£o Linear para Previs√£o de Pre√ßos")
        st.markdown("""
        Constru√≠mos um modelo de regress√£o linear para prever o pre√ßo de venda (`SalePrice`) 
        com base em vari√°veis independentes selecionadas.
        """)

        if 'SalePrice' not in df_ames.columns:
            st.error("A coluna 'SalePrice' √© necess√°ria para a an√°lise de Regress√£o e n√£o foi encontrada.")
        else:
            # Sele√ß√£o de vari√°veis para Regress√£o
            all_potential_predictors = [col for col in df_ames.columns if col not in ['SalePrice', 'Order', 'PID']]
            
            numerical_predictors = df_ames[all_potential_predictors].select_dtypes(include=np.number).columns.tolist()
            categorical_predictors_reg = df_ames[all_potential_predictors].select_dtypes(include='object').columns.tolist()

            st.sidebar.markdown("**Configura√ß√µes da Regress√£o:**")
            
            default_num_reg_vars = []
            common_num_vars_reg = ['GrLivArea', 'OverallQual', 'TotalBsmtSF', 'YearBuilt', 'FirstFlrSF', 'GarageCars', 'GarageArea']
            for var in common_num_vars_reg:
                if var in numerical_predictors: default_num_reg_vars.append(var)

            selected_numerical_vars_reg = st.sidebar.multiselect(
                "Selecione preditores num√©ricos:",
                options=numerical_predictors,
                default=default_num_reg_vars[:min(5, len(default_num_reg_vars))]
            )
            
            default_cat_reg_vars = []
            common_cat_vars_reg = ['Neighborhood', 'MSZoning', 'CentralAir', 'KitchenQual']
            for var in common_cat_vars_reg:
                 if var in categorical_predictors_reg and df_ames[var].nunique() < 15: # Limitar para n√£o gerar muitas dummies
                    default_cat_reg_vars.append(var)

            selected_categorical_vars_reg = st.sidebar.multiselect(
                "Selecione preditores categ√≥ricos (ser√£o 'dummificados'):",
                options=[var for var in categorical_predictors_reg if df_ames[var].nunique() < 20],
                default=default_cat_reg_vars[:min(2, len(default_cat_reg_vars))]
            )

            if not selected_numerical_vars_reg and not selected_categorical_vars_reg:
                st.warning("Por favor, selecione pelo menos uma vari√°vel preditora.")
            else:
                X_vars = selected_numerical_vars_reg + selected_categorical_vars_reg
                reg_df = df_ames[['SalePrice'] + X_vars].copy().dropna()

                if reg_df.shape[0] < len(X_vars) + 2:
                    st.error("Dados insuficientes ap√≥s remover NaNs para as vari√°veis selecionadas.")
                else:
                    X = reg_df[X_vars]
                    y = reg_df['SalePrice']

                    if selected_categorical_vars_reg:
                        X = pd.get_dummies(X, columns=selected_categorical_vars_reg, drop_first=True, dtype=float)

                    X = sm.add_constant(X.astype(float)) # Adicionar intercepto e garantir float

                    try:
                        model = sm.OLS(y, X).fit()
                        st.subheader("Sum√°rio do Modelo de Regress√£o (OLS)")
                        st.text(model.summary())

                        st.markdown("**Interpreta√ß√£o do Sum√°rio:**")
                        st.markdown(f"""
                        - **R-squared (R¬≤):** {model.rsquared:.3f}. Indica que ~{model.rsquared*100:.1f}% da vari√¢ncia em `SalePrice` √© explicada pelos preditores.
                        - **Adj. R-squared:** {model.rsquared_adj:.3f}. R¬≤ ajustado pela quantidade de preditores.
                        - **P>|t| (p-valor dos coeficientes):** Se < 0.05, o preditor √© estatisticamente significativo.
                        - **Coeficientes (coef):** Mostra a mudan√ßa esperada em `SalePrice` para um aumento unit√°rio no preditor, mantendo outros constantes.
                        """)
                        
                        st.subheader("Diagn√≥stico dos Res√≠duos da Regress√£o")
                        residuals_reg = model.resid
                        fitted_values_reg = model.fittedvalues

                        # 1. Res√≠duos vs. Ajustados
                        fig_res_fit, ax_res_fit = plt.subplots(figsize=(8,5))
                        sns.scatterplot(x=fitted_values_reg, y=residuals_reg, ax=ax_res_fit, alpha=0.6)
                        ax_res_fit.axhline(0, color='red', linestyle='--')
                        ax_res_fit.set_xlabel("Valores Ajustados")
                        ax_res_fit.set_ylabel("Res√≠duos")
                        ax_res_fit.set_title("Res√≠duos vs. Valores Ajustados")
                        st.pyplot(fig_res_fit)
                        plt.close(fig_res_fit)
                        st.caption("Ideal: pontos aleat√≥rios em torno da linha zero, sem padr√µes (como funil ou curva).")

                        # 2. Q-Q Plot dos Res√≠duos
                        fig_qq_reg, ax_qq_reg = plt.subplots(figsize=(6,4))
                        sm.qqplot(residuals_reg, line='s', ax=ax_qq_reg, fit=True)
                        ax_qq_reg.set_title("Q-Q Plot dos Res√≠duos (Regress√£o)")
                        st.pyplot(fig_qq_reg)
                        plt.close(fig_qq_reg)
                        st.caption("Ideal: pontos pr√≥ximos √† linha diagonal, indicando normalidade dos res√≠duos.")

                        # 3. Teste de Homocedasticidade (Breusch-Pagan)
                        try:
                            # Garantir que X n√£o tenha colunas n√£o num√©ricas que n√£o sejam dummies
                            X_bp_test = X.select_dtypes(include=np.number)
                            bp_test = sm.stats.het_breuschpagan(residuals_reg, X_bp_test)
                            labels_bp = ['Estat√≠stica LM', 'p-valor LM', 'Estat√≠stica F', 'p-valor F']
                            st.write("**Teste de Homocedasticidade (Breusch-Pagan):**")
                            for name, val in zip(labels_bp, bp_test):
                                st.write(f"- {name}: {val:.4f}")
                            if bp_test[1] < alpha:
                                st.write("Evid√™ncia de Heterocedasticidade (p < 0.05). Vari√¢ncia dos erros n√£o √© constante.")
                            else:
                                st.write("N√£o h√° evid√™ncia significativa de Heterocedasticidade (p >= 0.05).")
                        except Exception as e_bp:
                            st.warning(f"N√£o foi poss√≠vel executar o teste de Breusch-Pagan: {e_bp}")


                    except Exception as e:
                        st.error(f"Erro ao ajustar o modelo de regress√£o: {e}")
                        st.info("Verifique se h√° multicolinearidade perfeita ou vari√°veis problem√°ticas.")

st.sidebar.markdown("---")
st.sidebar.info("""
**Sobre este App:**
Dashboard para an√°lise do dataset Ames Housing usando ANOVA e Regress√£o Linear. 
Criado para o Desafio da Tarefa 2.
""")
# <<< FIM DO C√ìDIGO PARA COLAR EM UM ARQUIVO CHAMADO app.py >>>